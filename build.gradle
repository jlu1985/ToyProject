apply plugin: "java"
apply plugin: "eclipse"
apply plugin:'project-report'

group = 'org'
archivesBaseName = 'ToyProjectWithGradle'
version = '0.0.1-SNAPSHOT'

ext {
    TASKGROUP_FUN = "Experiment - Entry"
    TASKGROUP_ADVANCED ="Experiment - Advanced"
    JAVA_VERSION ="1.7";
    SPRING_VERSION = "4.1.4.RELEASE"
}

repositories {
	mavenCentral()
//	flatDir name: 'localDiskRepo', dirs: 'lib'
}

eclipse {
    project {
        name = 'ToyProject'
        comment = 'Experiment project'
    }
    jdt {
        sourceCompatibility = JAVA_VERSION;
        targetCompatibility = JAVA_VERSION;
    }
    classpath {
    downloadSources = true
    downloadJavadoc = true
    }

}


dependencies {
	testCompile 'junit:junit:4.10'
	testCompile 'org.mockito:mockito-all:1.9.5'
	compile fileTree(dir:'lib',includes:['*.jar'])

	compile "org.springframework:spring-core:$SPRING_VERSION"
	compile "org.springframework:spring-context:$SPRING_VERSION"
	compile "org.springframework:spring-beans:$SPRING_VERSION"
	compile "org.springframework:spring-expression:$SPRING_VERSION"
}


// doFirst(), doLast(), task configuration
task initializeDatabase (group:TASKGROUP_FUN)
initializeDatabase.description 'Copied from book to lean doFirst, doLast and task definition'
initializeDatabase << { println 'update database schema'}
//initializeDatabase { println 'configuring database connection'}
initializeDatabase.doLast { println "dolast" }
initializeDatabase.doLast { println "second doLast" }
initializeDatabase.doFirst { println 'connect to database'}

// onlyIf()
task createSchema(group:TASKGROUP_FUN) << {println 'create database schema'}
task loadTestData(dependsOn: createSchema,group:TASKGROUP_FUN)<<{println 'load test data'}
loadTestData.onlyIf {System.properties['load.data'] == 'true';}

task taskX (group:TASKGROUP_FUN) << { println 'task x'}
task taskY (group:TASKGROUP_FUN) << { println 'task y'}

task tryClosure (group:TASKGROUP_FUN) << {
    println 'The value of it is : ' + it;
}

tryClosure.doLast() { println 'Closure attached to method in this format ".doLast() {...}'; }
tryClosure.doLast { println 'Closure without parenthesis ".doLast {...}"'; }
tryClosure.doLast({ println 'Closure inside parenthesis ".doLast({...})"'; })

task tryCopy(type:Copy) { 
    group TASKGROUP_FUN
    description 'Copies resources'
    from('input').include('*.txt');
    into('output')
}

tryCopy.doFirst { println 'About to copy ' + it.source.getFiles() }
tryCopy.doLast { println 'files copied into ' + it.getDestinationDir() }

task tryExternalProperties {
    group TASKGROUP_FUN
    description 'loads external properites from gradle.property'
}

tryExternalProperties.doLast { println "Using gradle.properties, camelCaseProperty = $camelCaseProperty" }
tryExternalProperties.doLast { println "Using project default properties project =  $project" }
//tryExternalProperties.doLast { println "dotted properties from gradle.properties, custom.property = $(property('org.jl.custom.property'))" }


task listJars(group:TASKGROUP_ADVANCED,description:"Print each, copied form doc") << {
    println "About to print all compiled files"
    // File file -> stands for closure argument
    configurations.testCompile.each { File file -> println file.name }
    //
    
}

task defineCollection(group:TASKGROUP_ADVANCED,description:"Define a Map, and Set,and list") << {
    def testMap = [dir:"dirName",include:"onething", includes:['set item 1','set item 2']];
    println testMap.dir;
    println testMap.include;
    //for each loop
    testMap.includes.each { item -> println item };
    
    def list = ["item 1", "item 2", "item 3"]
    list.each { item -> println item }
}

